#!/bin/bash

export DEBIAN_FRONTEND=noninteractive

# Build utilities
apt-get update
apt-get -y install apt-utils
apt-get update
apt-get -y install nano bash-completion git sudo curl unzip

# Python
apt-get -y install python3 python3-pip
apt-get -y install swig
pip install --upgrade pip
pip install nvidia-pyindex # the index for python packages by Nvidia, we need it added before we can use `pip install -r requirements.txt`

## Add Kitware's apt repo ti install latest CMake
apt-get update
apt-get -y install apt-transport-https ca-certificates gnupg software-properties-common wget
wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ @UBUNTU_VERSION_NAME@ main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
apt-get update
rm /usr/share/keyrings/kitware-archive-keyring.gpg
apt-get install -y kitware-archive-keyring
apt-get -y install cmake

# Various general purpose libraries
apt-get -y install libboost-all-dev
apt-get -y install libprotobuf-dev protobuf-compiler
apt-get -y install libopencv-dev

# Nvidia cuda repositories
wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu@UBUNTU_VERSION_NUMERIC@/@ARCH@/cuda-keyring_1.0-1_all.deb
sudo dpkg -i cuda-keyring_1.0-1_all.deb
rm cuda-keyring_1.0-1_all.deb
add-apt-repository "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu@UBUNTU_VERSION_NUMERIC@/@ARCH@/ /"

# ML utilities
apt -y install @TENSORRT_REPO_FILE@
apt-key add /var/@TENSORRT_REPO_NAME@/*.pub
apt-get update
apt-get -y --allow-downgrades install libnvinfer@TRT_VER_MAJOR@=@NVINFER_VER@+@CUDA_VER_TEXT@ libnvinfer-plugin@TRT_VER_MAJOR@=@NVINFER_VER@+@CUDA_VER_TEXT@ \
libnvparsers@TRT_VER_MAJOR@=@NVINFER_VER@+@CUDA_VER_TEXT@ libnvonnxparsers@TRT_VER_MAJOR@=@NVINFER_VER@+@CUDA_VER_TEXT@ \
libnvinfer-bin=@NVINFER_VER@+@CUDA_VER_TEXT@ libnvinfer-dev=@NVINFER_VER@+@CUDA_VER_TEXT@ \
libnvinfer-plugin-dev=@NVINFER_VER@+@CUDA_VER_TEXT@ libnvparsers-dev=@NVINFER_VER@+@CUDA_VER_TEXT@ \
libnvonnxparsers-dev=@NVINFER_VER@+@CUDA_VER_TEXT@
apt-get update
# apt-get -y install cuda-driver-dev-@CUDA_VER_DASH@
# apt-get -y install cuda-@CUDA_VER_DASH@
apt-get -y install cuda-toolkit-@CUDA_VER_DASH@
apt-get -y install cuda-nvrtc-@CUDA_VER_DASH@
apt-get -y install tensorrt=@TRT_VER_FULL@+@CUDA_VER_TEXT@
apt-get -y install python3-libnvinfer=@NVINFER_VER@+@CUDA_VER_TEXT@ python3-libnvinfer-dev=@NVINFER_VER@+@CUDA_VER_TEXT@
apt-get -y install graphsurgeon-tf=@NVINFER_VER@+@CUDA_VER_TEXT@ uff-converter-tf=@NVINFER_VER@+@CUDA_VER_TEXT@

# Some docker images have wrong link-paths
[ -e /etc/ld.so.conf.d/z-cuda-stubs.conf ] && rm -f /etc/ld.so.conf.d/z-cuda-stubs.conf
# Create symlinnk to the correct cuda version
[ -e /usr/local/cuda ] && rm /usr/local/cuda
[ -e /usr/local/cuda-@CUDA_VER_NUM@  ] && ln -s /usr/local/cuda-@CUDA_VER_NUM@ /usr/local/cuda

echo "export PATH=\"/usr/local/cuda/bin:$PATH\"" >> ~/.bashrc
echo "export LD_LIBRARY_PATH=\"/usr/local/cuda/lib64:$LD_LIBRARY_PATH\"" >> ~/.bashrc
source ~/.bashrc

# Clean up
rm -rf /var/lib/apt/lists/*

unset DEBIAN_FRONTEND
